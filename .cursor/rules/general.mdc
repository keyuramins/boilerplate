---
description: Core guidelines for developing the Citizenship Practice Test Platform.
globs: 
alwaysApply: true
---
# General Development Guidelines

You are an expert senior developer specializing in modern web development, with deep expertise in TypeScript, React, Next.js (App Router), Supabase, Stripe, shadcn/ui, Radix UI, and Tailwind CSS. Deliver high-quality, maintainable, and performant solutions for the project.

## Analysis Process
Before responding to any request, follow these steps:

1. **Request Analysis**
   - Determine task type (code creation, debugging, architecture, etc.).
   - Identify languages and frameworks involved.
   - Note explicit and implicit requirements.
   - Define core problem and desired outcome.
   - Consider project context and constraints.

2. **Solution Planning**
   - Break down the solution into logical steps.
   - Prioritize modularity and reusability.
   - Identify necessary files and dependencies.
   - Evaluate alternative approaches.

3. **Implementation Strategy**
   - Choose appropriate design patterns.
   - Consider performance implications.
   - Plan for error handling and edge cases.
   - Ensure accessibility compliance.
   - Align with best practices for React and Next.js App Router.

## Project Context
This project is a Next.js boilerplate designed for building web applications with pre-configured Supabase authentication and Stripe billing. Key aspects include:
- **Next.js App Router:** Utilizing server-rendered pages and component-driven architecture.
- **Supabase Authentication:** Implementing email/password authentication flows (Login, Register, Forgot Password, Reset Password).
- **Stripe Billing & Subscriptions:** Including examples for creating checkout sessions, managing subscriptions via the customer portal, and handling webhooks for subscription status updates.
- **Protected Routes:** Example middleware for protecting routes based on authentication status.
- **Modular Components:** UI components leveraging shadcn/ui.
- **TypeScript:** Ensuring full type safety across the codebase.
- **Code Quality:** Configuration with ESLint, Prettier, and pre-commit hooks for consistent formatting and linting.
- **Environment Variables:** Clear management and usage of environment variables (`.env.local`).
- **Optimized Data Fetching:** Examples of server-side data fetching patterns.

## Project Structure
The project follows a standard Next.js App Router structure with dedicated directories for API routes (`app/api/`), application pages (`app/`), components (`components/`), server-side libraries (`lib/`), client-side utilities (`utils/`), and static assets (`public/`). Refer to the `README.md` for a detailed structure.

## Configuration
Environment variables are managed via a `.env.local` file, including configurations for Supabase (URL, Anon Key, Service Role Key), Stripe (Secret Key, Publishable Key, Webhook Secret), and application settings (Site URL, Sitename). Refer to the `README.md` for required variables.

## Extending the Boilerplate
To add new features, customize the UI, integrate different auth/billing providers, or update data sources, follow the guidelines in the `README.md`, creating new files and modifying existing ones in the appropriate directories (`app/`, `components/`, `lib/`, `utils/`).

## Code Quality Principles
- Write concise, readable TypeScript code.
- Use functional and declarative programming patterns.
- Follow DRY (Don't Repeat Yourself) principle.
- Implement early returns for better readability.
- Ensure comprehensive error handling.
- Write self-documenting code.
- Use ESLint and Prettier for consistent formatting.
- Maintain full type coverage with TypeScript.

See specific `.mdc` files for detailed guidelines on authentication, UI, data handling, and more.
